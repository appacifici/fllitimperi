<?php

namespace AppBundle\Repository;

/**
 * GroupRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ComparisonRepository extends \Doctrine\ORM\EntityRepository
{
    public function setCacheUtility( $secondLevelCacheUtility ) {
        $this->secondLevelCacheUtility = $secondLevelCacheUtility;
    }
  
    
    public function getCountAllActive() {             
        $query = $this->getEntityManager()
                ->createQuery(
                'SELECT count(c) as tot FROM AppBundle:Comparison c WHERE c.isActive = 1');        
        try {            
            return $query->getSingleResult();            
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }
    
    public function getTopComparison() {             
        $query = $this->getEntityManager()
                ->createQuery(
                'SELECT c FROM AppBundle:Comparison c WHERE c.isActive = 1 and c.isTop = 1 order by c.createDate desc')->setFirstResult(0)->setMaxResults(1);         
        try {            
            return $query->getSingleResult();            
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }
    
    /**
     * Recupera tutte le comparazioni
     * @param type $limit
     * @return type
     */
    public function getAllActive( $limit='0,100' ) {
        $limit = explode(',', $limit);
        $firstResult = count($limit) == 1 ? 0 : $limit[0];
        $lastResult = count($limit) == 1 ? $limit[0] : $limit[1];   
                
        $query = $this->getEntityManager()
                ->createQuery(
                'SELECT c FROM AppBundle:Comparison c WHERE c.isActive = 1 order by c.createDate desc')->setFirstResult($firstResult)->setMaxResults($lastResult);                  
        try {            
            return $query->getResult();            
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }
    
    /**
     * 
     * @param type $modelId
     * @param type $maxResult
     * @return type
     * Recupera le comparazioni per il modello corrente
     */
    public function getComparisonByModel( $modelId, $maxResult = 2 ) {
        
        $query = $this->getEntityManager()
                ->createQuery(
                'SELECT c FROM AppBundle:Comparison c WHERE c.isActive = 1 and ( c.modelOne = '.$modelId.' or c.modelTwo = '.$modelId.' ) order by c.createDate desc')
                ->setMaxResults( $maxResult );                  
        try {            
            return $query->getResult();            
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }
}
