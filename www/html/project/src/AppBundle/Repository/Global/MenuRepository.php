<?php

namespace AppBundle\Repository;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MenuRepository extends \Doctrine\ORM\EntityRepository
{
    
    public function setCacheUtility( $secondLevelCacheUtility ) {
        $this->secondLevelCacheUtility = $secondLevelCacheUtility;
    }
   
    
    /**
     * Recupera il menu in base alla posizione 
     * @param int $team_id
     * @return null|object
     */
    public function getMenuByPosition( $type, $toArray = false ) {
        $query = $this->getEntityManager()
            ->createQuery(
                'SELECT c, m FROM AppBundle:Menu m    
                    JOIN m.category c         
                    WHERE m.position = :type 
                    AND m.subcategory is NULL
                    ORDER BY m.orderMenu ASC
            ')
                ->setParameter('type', $type);
        
        try {
            $query->setCacheable( true );
            $query->setCacheRegion( 'my_menu_region_query' );

            if( !SECOND_LEVEL_CACHE_ENABLED || !$query->isCacheable() ) {
                $query->useQueryCache( true );
                $query->useResultCache(true, MENU_REGION_TTL, 'menu_getMenuByPosition_CacheORM'.md5( $type ) );    
            }      
       
            $result = $query->getResult();     
            if( SECOND_LEVEL_CACHE_ENABLED ||  SECOND_LEVEL_CACHE_SET_EXPIRE_ENABLED  )
                $this->secondLevelCacheUtility->setExpire( 'menu', MENU_REGION_TTL );
            
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }            
        return $result;
    }
    /**
     * Recupera il menu in base alla posizione 
     * @param int $team_id
     * @return null|object
     */
    public function getMenuSubcategories( $not = '', $toArray = false ) {
        $sql = 'SELECT t, m FROM AppBundle:Menu m    
                    JOIN m.subcategory t         
                    WHERE m.parentId is null 
                    AND m.subcategory is not null
                    ORDER BY m.orderMenu ASC
        ';        
        $query = $this->getEntityManager()->createQuery( $sql );
        
        try {
            $query->setCacheable( true );
            $query->setCacheRegion( 'my_menu_region_query' );

            if( !SECOND_LEVEL_CACHE_ENABLED || !$query->isCacheable() ) {
                $query->useQueryCache( true );
                $query->useResultCache(true, MENU_REGION_TTL, 'menu_getMenuBySubcategories_CacheORM'.md5( $sql ) );    
            }      
       
            $result = $query->getResult(); 
            if( SECOND_LEVEL_CACHE_ENABLED ||  SECOND_LEVEL_CACHE_SET_EXPIRE_ENABLED  )
                $this->secondLevelCacheUtility->setExpire( 'menu', MENU_REGION_TTL );
            
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }            
        return $result;
    }
    
    /**
     * Recupera il sottomenu in base alla categoria 
     * @param int $team_id
     * @return null|object
     */
    public function getAllSubCatTypologiesByPosition( $toArray = false ) {
        $sql = 'SELECT s, t, m FROM AppBundle:Menu m
                    LEFT JOIN m.subcategory s
                    LEFT JOIN m.typology t
                    WHERE m.parentId is not null
                    AND (m.subcategory is not null
                    OR m.typology is not null)
                    ORDER BY m.orderMenu ASC
        ';        
        $query = $this->getEntityManager()->createQuery( $sql );
        
        try {
            $query->setCacheable( true );
            $query->setCacheRegion( 'my_menu_region_query' );

            if( !SECOND_LEVEL_CACHE_ENABLED || !$query->isCacheable() ) {
                $query->useQueryCache( true );
                $query->useResultCache(true, MENU_REGION_TTL, 'menu_getMenuBySubcategories_CacheORM'.md5( $sql ) );    
            }      
       
            $result = $query->getResult();   
            if( SECOND_LEVEL_CACHE_ENABLED ||  SECOND_LEVEL_CACHE_SET_EXPIRE_ENABLED  )
                $this->secondLevelCacheUtility->setExpire( 'menu', MENU_REGION_TTL );
            
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }            
        return $result;
    }  
    
    /**
     * Controlla se il team da aggiungere sia già presente nel relativo menu
     * @param int $team_id
     * @return null|object
     */
    public function checkSubcatTypologyFromMenu( $menuType, $id, $entity, $toArray = false ) {
        $where = ' WHERE m.'.strtolower($entity).' = '.$id;
        
        $sql = 'SELECT m FROM AppBundle:Menu m'.$where.' AND m.position  = '.$menuType;
        
        $query = $this->getEntityManager()
            ->createQuery( $sql );
                
        try {
            if( empty ( $toArray ) )
                return $query->getResult();
            else
                return $query->getResult( \Doctrine\ORM\AbstractQuery::HYDRATE_ARRAY );
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }  
    
    /**
     * Controlla se la categoria da aggiungere sia già presente nel relativo menu
     * @param int $team_id
     * @return null|object
     */
    public function checkCategoryFromMenu( $menuType, $id,  $toArray = false ) {
        $query = $this->getEntityManager()
            ->createQuery(
                'SELECT m FROM AppBundle:Menu m
                    WHERE m.category    = :id
                    AND m.position      = :menuType
                ')
                ->setParameter( 'id', $id )
                ->setParameter( 'menuType', $menuType );
                
        try {
            if( empty ( $toArray ) )
                return $query->getResult();
            else
                return $query->getResult( \Doctrine\ORM\AbstractQuery::HYDRATE_ARRAY );
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }
    
     /**
     * Controlla se il team da aggiungere sia già presente nel relativo menu
     * @param int $team_id
     * @return null|object
     */
    public function checkSubcatTypologyByParentIdNotNull( $parentId, $id, $entity,  $toArray = false ) {
        $where = ' WHERE m.'. strtolower($entity).' = '.$id;
        $sql= 'SELECT m FROM AppBundle:Menu m'.$where.' AND m.parentId  = '.$parentId;
        
        $query = $this->getEntityManager()
            ->createQuery( $sql );
                
        try {
            if( empty ( $toArray ) )
                return $query->getResult();
            else
                return $query->getResult( \Doctrine\ORM\AbstractQuery::HYDRATE_ARRAY );
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }   
    
    
     /**
     * Recupera il sottomenu in base alla categoria 
     * @param int $team_id
     * @return null|object
     */
    public function getSubcatTypologiesByParentIdNotNull( $toArray = false ) {
        $query = $this->getEntityManager()
            ->createQuery(
                'SELECT m, s, t FROM AppBundle:Menu m
                    LEFT JOIN m.subcategory s
                    LEFT JOIN m.typology t
                    WHERE m.parentId is not null
                    AND m.position = 1
                    ORDER BY m.orderMenu ASC
            ');
        
        try {
            if( empty ( $toArray ) )
                return $query->getResult();
            else
                return $query->getResult( \Doctrine\ORM\AbstractQuery::HYDRATE_ARRAY );
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }
}
