<?php

namespace AppBundle\Repository;

/**
 * UserRepository
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ExternalUserRepository extends \Doctrine\ORM\EntityRepository
{   
    
    public function setCacheUtility( $secondLevelCacheUtility ) {
        $this->secondLevelCacheUtility = $secondLevelCacheUtility;
    }
    
     /*
     * Query che ritorna tutti i gruppi 
     */
    public function findByEmailePassword( $email, $password, $toArray = false) {
        $query = $this->getEntityManager()
                ->createQuery(
                        'SELECT ux FROM AppBundle:ExternalUser ux where ux.email = :email AND ux.password = :password')
                ->setParameter('email', $email)
                ->setParameter('password', $password);
        
        try {   
            if (empty($toArray))
                return $query->getSingleResult();
            else
                $response = $query->getSingleResult(\Doctrine\ORM\AbstractQuery::HYDRATE_ARRAY);
                return json_decode(json_encode( $response ), FALSE);

        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }
    
//    SELECT e0_.id AS id_0, e0_.name AS name_1, e0_.surname AS surname_2, e0_.username AS username_3, e0_.email AS email_4, e0_.password AS password_5, e0_.city AS city_6, e0_.age AS age_7, e0_.subcategory_id AS subcategory_id_8, e0_.register_at AS register_at_9, e0_.ext_user_code AS ext_user_code_10, e0_.access_token AS access_token_11, e0_.profile_img AS profile_img_12, e0_.is_top_user AS is_top_user_13, e0_.privacy AS privacy_14, e0_.newsletters AS newsletters_15 FROM external_users e0_ WHERE e0_.email = ? AND e0_.password = ?0
    
    /*
    * Query che ritorna tutti i gruppi 
    */
    public function findByUserCode( $userCode, $toArray = false) {
        $query = $this->getEntityManager()
                ->createQuery(
                        'SELECT ux FROM AppBundle:ExternalUser ux where ux.extUserCode = :userCode')
                ->setParameter( 'userCode', $userCode );
        try {   
            if (empty($toArray))
                return $query->getSingleResult();
            else
                $response = $query->getSingleResult(\Doctrine\ORM\AbstractQuery::HYDRATE_ARRAY);
                return json_decode(json_encode( $response ), FALSE);

        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }
    
   
}
