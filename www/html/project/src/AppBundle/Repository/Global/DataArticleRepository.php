<?php

namespace AppBundle\Repository;

/**
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class DataArticleRepository extends \Doctrine\ORM\EntityRepository {
    
    public function setParamsRepository( $params ) {           
        $this->secondLevelCacheUtility = $params->secondLevelCacheUtility;                
        $this->subcategoriesType = $params->subcategoriesType;                
    }
    
    public function setCacheUtility( $secondLevelCacheUtility ) {           
        $this->secondLevelCacheUtility = $secondLevelCacheUtility;      
    }
    
    
    /*
     * Query che ritorna gli articoli per categoria
     */
    public function getArticleDetailSQL( $id ) {
        $sql = 'SELECT da, ca, c, s,ss, img, u FROM AppBundle:DataArticle da
                    JOIN da.category c
                    LEFT JOIN da.subcategoryOne s
                    LEFT JOIN da.subcategoryTwo ss
                    JOIN da.contentArticle ca
                    JOIN da.images img
                    JOIN da.userPublish u
                WHERE da.id = '.$id;
        
        $query = $this->getEntityManager()->createQuery( $sql );
        return $query;
    }
    
    
    /*
     * Query che ritorna gli articoli per categoria
     */
    public function getArticleDetailFromUrlSQL( $megazineSectionId, $url ) {
        $sql = "SELECT da, ca, c, s,ss, img, u FROM AppBundle:DataArticle da
                    LEFT JOIN da.category c
                    LEFT JOIN da.subcategoryOne s
                    LEFT JOIN da.subcategoryTwo ss
                    LEFT JOIN da.contentArticle ca
                    LEFT JOIN da.priorityImg img
                    LEFT  JOIN da.userPublish u
                WHERE da.megazineSection = $megazineSectionId and ca.permalink = '".$url."'";
        
        $query = $this->getEntityManager()->createQuery( $sql );
        // echo $query->getSQL();exit;
        return $query;
    }
    
     /*
     * Query che ritorna gli articoli per categoria
     */
    public function getArticleDetail( $megazineSectionId, $id ) {        
        $query = $this->getArticleDetailFromUrlSQL( $megazineSectionId, $id );
        // $query->setCacheable( true );
        // $query->setCacheRegion( 'my_data_article_region_query' );                
                
        // if( !SECOND_LEVEL_CACHE_ENABLED || !$query->isCacheable() ) {
        //     $query->useQueryCache( true );
        //     $query->useResultCache(true, DATA_ARTICLE_REGION_TTL, 'data_article_getArticleDetail_CacheORM'.md5( $query->getSQL() ) );    
        // }        
        $result = $query->getOneOrNullResult();        
        
        return $result;
    }
    
    public function findArticlesByIds( $idsFilteredArticles, $limit = false ) {
//        return $this->findArticleByCategoryAndTeam(false, false, $limit, false, false, false, $idsFilteredArticles);
        
        $where = '1=1';
        if (!empty($idsFilteredArticles)) {
            $ids = join(",",$idsFilteredArticles);   
            $where .= ' AND da.id IN ('.$ids.')';            
        }
        
        $sql = 'SELECT da, img, ca, c, s, ss, u FROM AppBundle:DataArticle da
                    JOIN da.category c
                    LEFT JOIN da.subcategoryOne s
                    LEFT JOIN da.subcategoryTwo ss
                    JOIN da.contentArticle ca
                    JOIN da.priorityImg img
                    JOIN da.userPublish u
                WHERE 
                    ' . $where .' AND da.status = 1 AND da.publishAt < CURRENT_TIME() ORDER BY
                    da.publishAt DESC'
                ;
        
        
        
        $query = $this->getEntityManager()
                ->createQuery( $sql );
        
        if( !empty( $limit ) ) {
            $limit = explode(',', $limit);
            $firstResult = count($limit) == 1 ? 0 : $limit[0];
            $lastResult = count($limit) == 1 ? $limit[0] : $limit[1];
            $query->setFirstResult($firstResult)
            ->setMaxResults($lastResult);         
        }
                        
        $result = $query->getResult();           
        return $result;        
    }
    
    public function findRelatedByIds( $idsFilteredArticles, $limit = false ) {

        $sql = 'SELECT da, ca FROM AppBundle:DataArticle da                    
                    JOIN da.contentArticle ca                    
                WHERE da.id IN (:ids) ';
        
        $query = $this->getEntityManager()
                ->createQuery( $sql )->setParameter('ids', $idsFilteredArticles); 
        
        if( !empty( $limit ) ) {
            $limit = explode(',', $limit);
            $firstResult = count($limit) == 1 ? 0 : $limit[0];
            $lastResult = count($limit) == 1 ? $limit[0] : $limit[1];
            $query->setFirstResult($firstResult)
            ->setMaxResults($lastResult);         
        }
                        
        $result = $query->getResult();           
        return $result;        
    }
    
    /*
     * Query che ritorna gli articoli per categoria
     */
    public function findArticleByParams( $megazineSectionId = false, $categoryId = false, $subcategory = false, $typologyId = false, $limit, $topNews = false, $exclusive = false, $toArray = false, $idsFilteredArticles = false) {
        $where = 'da.status = 1 and da.publishAt < CURRENT_TIME() ';
        
        if( $categoryId == 'allnews' ) {
            
            $dataAllNews = date( 'Y-m-d H:i:s');
            $dataStartAllNews = new \DateTime( $dataAllNews. '-1 year' );
            $dataStartAllNews = date( 'Y-m-d H:i:s', $dataStartAllNews->getTimestamp() );                    
            $where = "da.status = 1 and da.publishAt > '".$dataStartAllNews."' ";            
            $categoryId = false;
        }
        
        if (!empty($megazineSectionId))
            $where .= ' AND da.megazineSection = ' . $megazineSectionId;
        
        
        if (!empty($categoryId))
            $where .= ' AND da.category = ' . $categoryId;

        if ( !empty( $subcategory ) ) {
            switch( $this->subcategoriesType ) {
                case 'relationship':
                    $where .= ' AND da.subcategoryOne = ' . $subcategory . ' ';
                break;
                case 'tags':
                    $where .= ' AND (da.subcategoryOne = ' . $subcategory . ' OR da.subcategoryTwo = ' . $subcategory . ')';
                break;
            }
        }
        
        if (!empty($typologyId))
            $where .= ' AND da.typology = ' . $typologyId;

        
//        if (!empty($notTopNews)) {
//            $where .= ' AND da.topNews != 1';
//        } else {
//            $where .= ' AND da.topNews = 1';
//        }

        if ( !empty($topNews) ) {
            $where .= ' AND da.topNews = 1'; 
        }
        
        if (!empty($exclusive)) {
            $where .= ' AND da.exclusive = 1';
        }
        if (!empty($idsFilteredArticles)) {
            $ids = join(",",$idsFilteredArticles);   
            $where .= ' AND da.id IN ('.$ids.')';
        }
        
        
        $limit = explode(',', $limit);
        $firstResult = count($limit) == 1 ? 0 : $limit[0];
        $lastResult = count($limit) == 1 ? $limit[0] : $limit[1];
        

        $sql = 'SELECT da, img, ca, c, s, ss, u FROM AppBundle:DataArticle da
                    LEFT JOIN da.category c
                    LEFT JOIN da.subcategoryOne s
                    LEFT JOIN da.subcategoryTwo ss
                    JOIN da.contentArticle ca
                    JOIN da.priorityImg img
                    JOIN da.userPublish u
                WHERE 
                    ' . $where . ' 
                ORDER BY
                    da.publishAt DESC';
        
        $query = $this->getEntityManager()
                ->createQuery( $sql )
                ->setFirstResult($firstResult)
                ->setMaxResults($lastResult);  
        
        $query->setCacheable( true );
        $query->setCacheRegion( 'my_data_article_region_query' );
        if( FIRST_LEVEL_CACHE_ENABLED && ( !SECOND_LEVEL_CACHE_ENABLED || !$query->isCacheable() ) ) {
            $query->useQueryCache( true );
            $query->useResultCache(true, DATA_ARTICLE_REGION_TTL, 'data_article_findArticleByCategoryAndTeam_CacheORM'.md5( $where.$firstResult.$lastResult ) );    
        }        
        $result = $query->getResult();   
        return $result;
    }

    public function countArticleByIds( $idsFilteredArticles ) {
        return $this->countArticleByParams( false, false, false, false, $idsFilteredArticles );
    }
    
    /*
     * Query che ritorna gli articoli per categoria
     */
    public function countArticleByParams($megazineSectionId = false, $categoryId = false, $subcategory = false, $typologyId = false, $topNews = false, $exclusive = false, $idsFilteredArticles = false ) {
        $where = ' da.status = 1 and da.publishAt < CURRENT_TIME() ';
        
        if( $categoryId == 'allnews' ) {
            $dataAllNews = date( 'Y-m-d H:i:s');
            $dataStartAllNews = new \DateTime( $dataAllNews. '-1 year' );
            $dataStartAllNews = date( 'Y-m-d H:i:s', $dataStartAllNews->getTimestamp() );                    
            $where = "da.status = 1 and da.publishAt > '".$dataStartAllNews."' ";            
            $categoryId = false;
        }
        
        if (!empty($megazineSectionId))
            $where .= ' AND da.megazineSection = ' . $megazineSectionId;
        
        if (!empty($categoryId))
            $where .= ' AND da.category = ' . $categoryId;

        if ( !empty( $subcategory ) ) {
            switch( $this->subcategoriesType ) {
                case 'relationship':
                    $where .= ' AND da.subcategoryOne = ' . $subcategory . ' ';
                break;
                case 'tags':
                    $where .= ' AND (da.subcategoryOne = ' . $subcategory . ' OR da.subcategoryTwo = ' . $subcategory . ')';
                break;
            }
        }
                
        if (!empty($typologyId))
            $where .= ' AND da.typology = ' . $typologyId;
        
        if ( !empty($topNews) ) {
            $where .= ' AND da.topNews = 1'; 
        }
        if ( !empty($exclusive) ) {
            $where .= ' AND da.exclusive = 1'; 
        }
        if ( !empty($idsFilteredArticles) ) {
            $ids = join(",",$idsFilteredArticles);   
            $where .= ' AND da.id IN ('.$ids.')';
        }

        $query = $this->getEntityManager()
                ->createQuery(
                'SELECT COUNT(da) as tot FROM AppBundle:DataArticle da                     
                    JOIN da.contentArticle ca
                    JOIN da.priorityImg img
                    JOIN da.userPublish u
                WHERE 
                    ' . $where . '');
        try {
            return $query->getSingleResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }
    
       // metodo che filtra gli articoli in base a determinati parametri 
    
    public function filterArticlesWithParams( $params, $limit, $userId = false ) { 
        $where = $this->getFilterArticles( $params, $userId );

        $limit = explode(',', $limit);
        $firstResult = count($limit) == 1 ? 0 : $limit[0];
        $lastResult = count($limit) == 1 ? $limit[0] : $limit[1];

        $query = $this->getEntityManager()
                ->createQuery(
                'SELECT da,ca,img,uc  FROM AppBundle:DataArticle da
                    JOIN da.contentArticle ca
                    LEFT JOIN da.priorityImg img
                    LEFT JOIN da.userCreate uc
                WHERE 
                    ' . $where.' ORDER BY
                    da.publishAt DESC')

                ->setFirstResult($firstResult)
                ->setMaxResults($lastResult);
        
        
        try {            
            return $query->getResult();            
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }
    
    
    /*
     * Query che fa la count degli articoli filtrati 
     */
    public function countFilterArticles( $params, $userId = false ) {
        $where = $this->getFilterArticles( $params,$userId );
        
        $sql = 'SELECT COUNT(da) as tot FROM AppBundle:DataArticle da
                    JOIN da.contentArticle ca
                WHERE 
                    ' . $where;        
        $query = $this->getEntityManager()->createQuery( $sql );        
        try {
             
            if( FIRST_LEVEL_CACHE_ENABLED ) {
                $query->useQueryCache( true );
                $query->useResultCache(true, 3600, 'data_article_countFilterArticles_CacheORM'.md5( $sql.'10' ) );    
            }      
       
            $result = $query->getSingleResult();                 
            
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
        return $result;
    }
    
     /*
     * Query che crea il where, ovvero la parte di query che filtra gli articoli in base a determinati parametri (keyword, user, start-date, end-date)
     */
    public function getFilterArticles( $params, $userId = false ) {        
        $where = ' 1=1';
        if (!empty($params['keyword']) )
            $where .= " AND ( ca.title like '%".$params['keyword']."%' OR ca.subHeading like '%".$params['keyword']."%') ";

        if ( !empty( $userId ) ) {
            $where .= ' AND da.userPublish = ' . $userId;
        } else if ( !empty($params['user'] ) ) {
            $where .= ' AND da.userPublish = ' . $params['user'];
        }

        if ( isset( $params['status'] ) && $params['status'] != ''  ) {
            $where .= ' AND da.status = ' . $params['status'];
        }
        
        if ( !empty( $params['start-date'] ) && !empty( $params['end-date'] ) ) {            
            $dateInit = date( 'Y-m-d ', strtotime( str_replace( ' ', '-', $params['start-date'] ) ) ). '00:00:00';             
            $dateEnd = date( 'Y-m-d ', strtotime( str_replace( ' ', '-',$params['end-date']) ) ) . '23:59:59';            
            $where .= " AND ( da.publishAt >='{$dateInit}' AND da.publishAt <= '{$dateEnd}')";
        }        
        
        if ( !empty( $params['start-date-seo'] ) && !empty( $params['end-date-seo'] ) ) {            
            $dateInit = $params['start-date-seo']    ;        
            $dateEnd = $params['end-date-seo'] ;    
            $where .= " AND ( da.publishAt >='{$dateInit}' AND da.publishAt <= '{$dateEnd}')";
        }        
        return $where;
    }
    /*
     * Query che ritorna gli articoli flaggati come BreakingNews
     */

    public function getBreakingNews( $limit = 3 ) {
        $sql = 'SELECT da,ca, img FROM AppBundle:DataArticle da
            JOIN da.contentArticle ca
            JOIN da.priorityImg img
            WHERE da.breakingNews = 1 and da.status = 1 and da.publishAt < CURRENT_TIME() 
            ORDER BY
            da.publishAt DESC
        ';
        $query = $this->getEntityManager()->createQuery( $sql )->setMaxResults($limit);
        
        try {
            $query->setCacheable( true );
            $query->setCacheRegion( 'my_data_article_region_query' );

            if( FIRST_LEVEL_CACHE_ENABLED && ( !SECOND_LEVEL_CACHE_ENABLED || !$query->isCacheable() ) ) {
                $query->useQueryCache( true );
                $query->useResultCache(true, DATA_ARTICLE_REGION_TTL, 'data_article_getBreakingNews_CacheORM'.md5( $sql.'10' ) );    
            }             
            $result = $query->getResult();            
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }                   
        return $result;
        
    }
    
    /*
     * Query che ritorna gli articoli flaggati come TopNews
     */
    public function getTopNews( $limit = 3 ) {
         $sql = 'SELECT da, ca, c,s,ss,u, img FROM AppBundle:DataArticle da
                    JOIN da.category c
                    LEFT JOIN da.subcategoryOne s
                    LEFT JOIN da.subcategoryTwo ss
                    JOIN da.contentArticle ca
                    LEFT JOIN da.priorityImg img
                    JOIN da.userPublish u
                    WHERE da.topNews = 1  and da.publishAt < CURRENT_TIME() and da.status = 1
                    ORDER BY
                    da.publishAt DESC';            
        $query = $this->getEntityManager()->createQuery( $sql )->setMaxResults($limit);
        
        try { 
            $query->setCacheable( true );
            $query->setCacheRegion( 'my_data_article_region_query' );

            if( FIRST_LEVEL_CACHE_ENABLED && ( !SECOND_LEVEL_CACHE_ENABLED || !$query->isCacheable() ) ) {
                $query->useQueryCache( true );
                $query->useResultCache(true, DATA_ARTICLE_REGION_TTL, 'data_article_getTopNews_CacheORM'.md5( $sql.'6' ) );    
            }      
       
            $result = $query->getResult();     
            
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }                   
        return $result;
    }
    
    /*
     * Query che ritorna gli articoli flaggati come TopNews
     */
    public function getExclusive( $limit = 10 ) {
         $sql = 'SELECT da, ca, c, s, ss, u, img FROM AppBundle:DataArticle da
                    JOIN da.category c
                    LEFT JOIN da.subcategoryOne s
                    LEFT JOIN da.subcategoryTwo ss
                    JOIN da.userPublish u
                    JOIN da.contentArticle ca
                    LEFT JOIN da.images img
                    WHERE da.exclusive = 1  and da.publishAt < CURRENT_TIME() and da.status = 1
                    ORDER BY
                    da.publishAt DESC';            
        $query = $this->getEntityManager()->createQuery( $sql )->setMaxResults($limit);
        
        try {
            $query->setCacheable( true );
            $query->setCacheRegion( 'my_data_article_region_query' );

            if( FIRST_LEVEL_CACHE_ENABLED && ( !SECOND_LEVEL_CACHE_ENABLED || !$query->isCacheable() ) ) {
                $query->useQueryCache( true );
                $query->useResultCache(true, DATA_ARTICLE_REGION_TTL, 'data_article_getTopNews_CacheORM'.md5( $sql.'6' ) );    
            }      
       
            $result = $query->getResult();     
            
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }                   
        return $result;
    }
    // metodo che recupera tutti gli articoli per l'admin
    
    public function getAllArticles( $limit, $toArray = false) {
        $where = ' 1=1';
        
        $limit = explode(',', $limit);
        $firstResult = count($limit) == 1 ? 0 : $limit[0];
        $lastResult = count($limit) == 1 ? $limit[0] : $limit[1];

        $query = $this->getEntityManager()
                ->createQuery(
                'SELECT da,ca,img,up,uc  FROM AppBundle:DataArticle da
                    JOIN da.contentArticle ca
                    LEFT JOIN da.priorityImg img
                    LEFT JOIN da.userPublish up
                    LEFT JOIN da.userCreate uc
                WHERE 
                    ' . $where . '
                ORDER BY
                    da.publishAt DESC')
                ->setFirstResult($firstResult)
                ->setMaxResults($lastResult);
//        echo $query->getSQL();
        try {
            if (empty($toArray))
                return $query->getResult();
            else
                return $query->getResult(\Doctrine\ORM\AbstractQuery::HYDRATE_ARRAY);
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }
    // metodo che recupera tutti gli articoli per l'admin
    
    public function countAllArticles( $toArray = false) {
        $where = ' 1=1';
       

        $query = $this->getEntityManager()
                ->createQuery(
                'SELECT COUNT(da) FROM AppBundle:DataArticle da
                WHERE 
                    ' . $where . '
                ORDER BY
                    da.publishAt DESC');

        try {
            if (empty($toArray))
                return $query->getResult();
            else
                return $query->getResult(\Doctrine\ORM\AbstractQuery::HYDRATE_ARRAY);
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }
    
    public function getAllTopNewsImg() {
        
        $query = $this->getEntityManager()
                ->createQuery(
                'SELECT da FROM AppBundle:DataArticle da
                WHERE da.topNewsImg is not null and da.publishAt > :date');
        $query->setParameter('date', new \DateTime('-1 month'));

        try {
            if (empty($toArray))
                return $query->getResult();
            else
                return $query->getResult(\Doctrine\ORM\AbstractQuery::HYDRATE_ARRAY);
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
        
    }
    
    public function deleteAllTopNewsImg() {
        
        $query = $this->getEntityManager()
                ->createQuery(
                'SELECT da FROM AppBundle:DataArticle da
                WHERE da.topNewsImg is not null and da.publishAt < :date');
        $query->setParameter('date', new \DateTime('-10 days'));

        try {
            if (empty($toArray))
                return $query->getResult();
            else
                return $query->getResult(\Doctrine\ORM\AbstractQuery::HYDRATE_ARRAY);
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
            
        
    }
         /**
     * Crea la query con la cache
     * @param type $toArray
     * @return type
     */
    public function getIdLastArticle( $toArray = false ) {
        $sql = 'SELECT da FROM AppBundle:DataArticle da WHERE da.category IS NOT NULL order by da.publishAt desc';
        $query = $this->getEntityManager()->createQuery( $sql)->setMaxResults(1);
        
        $query->setCacheable( true );
        $query->setCacheRegion( 'my_banner_region_query' );
                
//        if( !SECOND_LEVEL_CACHE_ENABLED || !$query->isCacheable() ) {
//            $query->useQueryCache( true );
//            $query->useResultCache(true, BANNER_REGION_TTL, 'banner_findById_CacheORM'.md5( $sql ) );    
//        }        
        $result = $query->getSingleResult();        
        
//        if( SECOND_LEVEL_CACHE_ENABLED ||  SECOND_LEVEL_CACHE_SET_EXPIRE_ENABLED  )
//            $this->secondLevelCacheUtility->setExpire( 'banner', BANNER_REGION_TTL );
        
        return $result;
    }
    
     
      // metodo che recupera tutti gli articoli per l'admin
    
    public function getAllArticlesFosElastica() {
       $repository = $this->getEntityManager()->getRepository('AppBundle:DataArticle');

       $qb = $repository->createQueryBuilder('da');
       $qb->select('da,ca');       
       $qb->join('da.contentArticle', 'ca');
       $qb->join('da.priorityImg', 'img');
       $qb->where('da.status = 1 '); 
       $qb->orderBy("da.publishAt", 'DESC');
       
       return $qb; 
        

    }
    
}