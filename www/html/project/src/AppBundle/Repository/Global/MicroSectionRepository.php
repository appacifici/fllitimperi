<?php

namespace AppBundle\Repository;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MicroSectionRepository extends \Doctrine\ORM\EntityRepository
{
    
     public function setCacheUtility( $secondLevelCacheUtility ) {
        $this->secondLevelCacheUtility = $secondLevelCacheUtility;
    }
    
     //metodo che recupera tutti i modelli attivi completati o che hanno prodotti per elastica
    public function getAllTypologiesFosElastica() {
       $repository = $this->getEntityManager()->getRepository('AppBundle:MicroSection');
       $qb = $repository->createQueryBuilder('m');
       $qb->select('m');       
       $qb->where('m.isActive = 1 and m.hasProducts > 0 ');            
       return $qb;         
    }
    
      
    /**
     * Crea la query con la cache
     * @param type $toArray
     * @return type
     */
    public function findByNameUrl( $name ) {
        $sql = "SELECT ms FROM AppBundle:MicroSection ms             
                WHERE ms.nameUrl = '".$name."'"; 
        $query = $this->getEntityManager()->createQuery( $sql )->setMaxResults(1);
        $query->setCacheable( true );
        $query->setCacheRegion( 'my_microSection_region_query' );
                
        if( !SECOND_LEVEL_CACHE_ENABLED || !$query->isCacheable() ) {
            $query->useQueryCache( true );
            $query->useResultCache(true, CATEGORY_REGION_TTL, 'microSection_findByNameUrl_CacheORM'.md5( $sql ) );    
        }        
        $result = $query->getOneOrNullResult();
        if( SECOND_LEVEL_CACHE_ENABLED ||  SECOND_LEVEL_CACHE_SET_EXPIRE_ENABLED  )
            $this->secondLevelCacheUtility->setExpire( 'microSection', CATEGORY_REGION_TTL );
        
        return $result;
    }
    
    /**
     * Crea la query con la cache che recupera i team per la registrazione Utente
     * @param type $toArray
     * @return type
     */
    public function findMicroSectionsByTypology( $typologyId ) {
        $sql = 'SELECT m FROM AppBundle:MicroSection m WHERE m.typology = '.$typologyId.' ORDER BY m.name ASC';
        $query = $this->getEntityManager()->createQuery( $sql );
        
        try {
            
//            $query->setCacheable( SECOND_LEVEL_CACHE_ENABLED );
//            $query->setCacheRegion( 'my_subcategory_region_query' );
//
//            if( !SECOND_LEVEL_CACHE_ENABLED || !$query->isCacheable() ) {
//                $query->useQueryCache( true );
//                $query->useResultCache(true, TEAM_REGION_TTL, 'subcategory_findSubcategoriesIsTeam_CacheORM'.md5( $sql ) );    
//            }      
       
            $result = $query->getResult();     
//            if( SECOND_LEVEL_CACHE_ENABLED ||  SECOND_LEVEL_CACHE_SET_EXPIRE_ENABLED  )
//                $this->secondLevelCacheUtility->setExpire( 'subcategory', TEAM_REGION_TTL );
            
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
        
        return $result;
    }
    
    /**
     * Crea la query con la cache
     * @param type $toArray
     * @return type
     */
    public function findAllMicroSections( $toObject = false ) {
        $sql = 'SELECT m,t FROM AppBundle:MicroSection m join m.typology t WHERE m.isActive = 1 ORDER BY m.name ASC';        
        $query = $this->getEntityManager()->createQuery( $sql );
        
        $query->setCacheable( true );
        $query->setCacheRegion( 'my_micro_section_region_query' );
                
        if( !SECOND_LEVEL_CACHE_ENABLED || !$query->isCacheable() ) {
            $query->useQueryCache( true );
            $query->useResultCache(true, CATEGORY_REGION_TTL, 'micro_section_findAllMicroSections_CacheORM'.md5( $sql ) );    
        }        
        
        if( empty ( $toObject ) ) {
            $result =  $query->getResult();
        } else {
            $result = $query->getResult( \Doctrine\ORM\AbstractQuery::HYDRATE_ARRAY );
            $result =  json_decode(json_encode($result), FALSE);
        }
        
        if( SECOND_LEVEL_CACHE_ENABLED ||  SECOND_LEVEL_CACHE_SET_EXPIRE_ENABLED  )
            $this->secondLevelCacheUtility->setExpire( 'microSection', CATEGORY_REGION_TTL );
        
        return $result;
    }
        
    /*
     * Query che ritorna i prodotti paginati 
     */
    public function findMicroSectionWithLimit( $limit, $catId = false, $subcatId = false, $typologyId = false, $hasModels = false ) { 
        $where = 'm.isActive = 1 ';
        
        if( !empty( $typologyId ) )
            $where .= ' AND m.typology = '.$typologyId;
        
        if( !empty( $subcatId ) )
            $where .= ' AND m.subcategory = '.$subcatId;
        
        if( !empty( $catId ) )
            $where .= ' AND m.category = '.$catId;
                
        if( !empty( $hasModels ) )
            $where .= $hasModels == 0 ? ' AND m.hasModels = '.$hasModels : ' AND m.hasModels > '.$hasModels;
        
        
        $sql = 'SELECT m FROM AppBundle:MicroSection m WHERE '. $where .' ORDER BY m.name ASC';
        
        $query = $this->getEntityManager()
                ->createQuery( $sql );
        
        if( !empty( $limit ) ) {
            $limit = explode(',', $limit);
            $firstResult = count($limit) == 1 ? 0 : $limit[0];
            $lastResult = count($limit) == 1 ? $limit[0] : $limit[1];
            $query->setFirstResult($firstResult)
            ->setMaxResults($lastResult);         
        }
        
        try {            
            return $query->getResult();            
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }
    
     /*
     * Query che fa la count dei prodotti   
     */
    public function countMicroSection(  $catId = false, $subcatId = false, $typologyId = false, $hasModels = false ) {
        $where = '1=1';
        
        if( !empty( $subcatId ) )
            $where .= ' AND m.subcategory = '.$subcatId;
        
        if( !empty( $catId ) )
            $where .= ' AND m.category = '.$catId;
        
        if( !empty( $hasModels ) )
            $where .= $hasModels == 0 ? ' AND m.hasModels = '.$hasModels : ' AND m.hasModels > '.$hasModels;
        
        $sql = 'SELECT COUNT(m) as tot FROM AppBundle:MicroSection m WHERE '. $where;        
        $query = $this->getEntityManager()->createQuery( $sql );        
        try {
            $result = $query->getSingleResult();                 
            
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
        return $result;
    }
    
    
}
