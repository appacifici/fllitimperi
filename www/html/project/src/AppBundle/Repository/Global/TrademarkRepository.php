<?php

namespace AppBundle\Repository;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TrademarkRepository extends \Doctrine\ORM\EntityRepository
{
    
    public function setCacheUtility( $secondLevelCacheUtility ) {
        $this->secondLevelCacheUtility = $secondLevelCacheUtility;
    }
    
     /**
     * Crea la query con la cache
     * @param type $toArray
     * @return type
     */
    public function findAllTrademarks( $toObject = false ) {
        $sql = 'SELECT t FROM AppBundle:Trademark t WHERE t.isActive = 1 ORDER BY t.name ASC';        
        $query = $this->getEntityManager()->createQuery( $sql );
        
        $query->setCacheable( true );
        $query->setCacheRegion( 'my_trademark_region_query' );
                
        if( !SECOND_LEVEL_CACHE_ENABLED || !$query->isCacheable() ) {
            $query->useQueryCache( true );
            $query->useResultCache(true, CATEGORY_REGION_TTL, 'trademark_findAllTrademarks_CacheORM'.md5( $sql ) );    
        }        
        
        if( empty ( $toObject ) ) {
            $result =  $query->getResult();
        } else {
            $result = $query->getResult( \Doctrine\ORM\AbstractQuery::HYDRATE_ARRAY );
            $result =  json_decode(json_encode($result), FALSE);
        }
        
        if( SECOND_LEVEL_CACHE_ENABLED ||  SECOND_LEVEL_CACHE_SET_EXPIRE_ENABLED  )
            $this->secondLevelCacheUtility->setExpire( 'trademark', CATEGORY_REGION_TTL );
        
        return $result;
    }
    
    /*
     * Query che ritorna tutti i top marchi
     */
    public function getTopTrademarks( $limit, $toArray = false) {
        $query = $this->getEntityManager()
                ->createQuery(
                        'SELECT t FROM AppBundle:Trademark t where t.top = 1 ')
                ->setMaxResults($limit);
        try {   
            if (empty($toArray))
                return $query->getResult();
            else
                $response = $query->getResult(\Doctrine\ORM\AbstractQuery::HYDRATE_ARRAY);
                return json_decode(json_encode( $response ), FALSE);

        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }
    
    /*
     * Query che ritorna i prodotti paginati 
     */
    public function findTrademarksWithLimit( $limit ) { 
        $limit = explode(',', $limit);
        $firstResult = count($limit) == 1 ? 0 : $limit[0];
        $lastResult = count($limit) == 1 ? $limit[0] : $limit[1];

        $query = $this->getEntityManager()
                ->createQuery(
                'SELECT t FROM AppBundle:Trademark t
                ORDER BY t.name ASC')
                ->setFirstResult($firstResult)
                ->setMaxResults($lastResult);
        try {            
            return $query->getResult();            
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }
    
     /*
     * Query che fa la count dei prodotti 
     */
    public function countTrademarks() {
        $sql = 'SELECT COUNT(t) as tot FROM AppBundle:Trademark t';        
        $query = $this->getEntityManager()->createQuery( $sql );        
        try {
            $result = $query->getSingleResult();                 
            
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
        return $result;
    }
}
