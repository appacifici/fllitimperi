<?php

namespace AppBundle\Repository;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SearchTermRepository extends \Doctrine\ORM\EntityRepository
{
    
    public function setCacheUtility( $secondLevelCacheUtility ) {
        $this->secondLevelCacheUtility = $secondLevelCacheUtility;
    }
    
    public function findSearchTermsSection( $category, $subcategory, $typology, $section, $name = false, $releatedId = false, $toArray = false) {
        $where = "s.section = '".$section."'";
        
        if( !empty( $category ) )
            $where .= ' AND s.category = '.$category;
        
        if( !empty( $subcategory ) )
            $where .= ' AND s.subcategory = '.$subcategory;
        
        if( !empty( $typology ) ) 
            $where .= ' AND s.typology = '.$typology;
                
        if( !empty( $name ) ) 
            $where .= " AND s.name = '".$name."'";
                
        if( !empty( $releatedId ) ) {
            $where .= " AND s.releatedId = '".$releatedId."' ";
        } else {
            if( empty( $name ) )  {                
                $where .= " AND s.releatedId IS NULL ";
            }
        }        
        
        $sql = 'SELECT s FROM AppBundle:SearchTerm s
                WHERE '. $where;
        
        $query = $this->getEntityManager()->createQuery( $sql );
        $query->setCacheable( true );
        $query->setCacheRegion( 'my_search_term_region_result' );
             
        if( !SECOND_LEVEL_CACHE_ENABLED || !$query->isCacheable() ) {
            $query->useQueryCache( true );
            $query->useResultCache(true, BESTSELLER_SEARCH_TERM_REGION_TTL, 'searchterm_findSearchTermsSection_CacheORM'.md5( $sql ) );    
        }                 
//        echo $query->getSQL().'<br>';
        try {   
            if (empty($toArray))
                return $query->getResult();
            else
                $response = $query->getResult(\Doctrine\ORM\AbstractQuery::HYDRATE_ARRAY);
                return json_decode(json_encode( $response ), FALSE);

        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
        
    }
    
}
