<?php

namespace AppBundle\Repository;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends \Doctrine\ORM\EntityRepository
{
    
    public function setCacheUtility( $secondLevelCacheUtility ) {
        $this->secondLevelCacheUtility = $secondLevelCacheUtility;
    }
    
    /*
     * Query che ritorna tutti i gruppi 
     */
    public function findByEmailePassword( $email, $password, $toArray = false) {
        $query = $this->getEntityManager()
                ->createQuery(
                        'SELECT u, g FROM AppBundle:User u JOIN u.role g where u.email = :email AND u.password = :password')
                ->setParameter('email', $email)
                ->setParameter('password', $password);
        ;
        try {   
            if (empty($toArray))
                return $query->getSingleResult();
            else
                $response = $query->getSingleResult(\Doctrine\ORM\AbstractQuery::HYDRATE_ARRAY);
                return json_decode(json_encode( $response ), FALSE);

        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }
    
     /**
     * Crea la query con la cache
     * @param type $toArray
     * @return type
     */
    public function findAllUsers( $toArray = false ) {
        $sql = 'SELECT u FROM AppBundle:User u WHERE u.isAdmin = 1 ORDER BY u.surname ASC';        
        $query = $this->getEntityManager()->createQuery( $sql );
        
        $query->setCacheable( true );
        $query->setCacheRegion( 'my_user_region_query' );
                
        if( !SECOND_LEVEL_CACHE_ENABLED || !$query->isCacheable() ) {
            $query->useQueryCache( true );
            $query->useResultCache(true, CATEGORY_REGION_TTL, 'user_findAllUsers_CacheORM'.md5( $sql ) );    
        }        
        $result = $query->getResult();     
        
        if( SECOND_LEVEL_CACHE_ENABLED ||  SECOND_LEVEL_CACHE_SET_EXPIRE_ENABLED  )
            $this->secondLevelCacheUtility->setExpire( 'user', USER_REGION_TTL );
        
        return $result;
    }
}
