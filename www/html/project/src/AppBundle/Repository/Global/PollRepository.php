<?php

namespace AppBundle\Repository;

/**
 * GroupRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PollRepository extends \Doctrine\ORM\EntityRepository
{
    
    public function setCacheUtility( $secondLevelCacheUtility ) {
        $this->secondLevelCacheUtility = $secondLevelCacheUtility;
    }
    
    /**
     * Crea la query con la cache
     * @param type $toArray
     * @return type
     */
    public function findAllPolls() {                
        $query = $this->getEntityManager()->createQuery( 
            'SELECT p FROM AppBundle:Poll p order by p.id ASC' 
        );
        
        $query->setCacheable( SECOND_LEVEL_CACHE_ENABLED );
        $query->setCacheRegion( 'my_poll_region_query' );
                
        if( FIRST_LEVEL_CACHE_ENABLED && ( !SECOND_LEVEL_CACHE_ENABLED || !$query->isCacheable() ) ) {
            $query->useQueryCache( FIRST_LEVEL_CACHE_ENABLED );
            $query->useResultCache(FIRST_LEVEL_CACHE_ENABLED, BANNER_REGION_TTL, 'poll_findAllPolls_CacheORM');    
        }        
        $result = $query->getResult();     
        if( SECOND_LEVEL_CACHE_ENABLED ||  SECOND_LEVEL_CACHE_SET_EXPIRE_ENABLED  )
            $this->secondLevelCacheUtility->setExpire( 'poll', POLL_REGION_TTL );
        
        return $result;
    }
    
    /**
     * Crea la query con la cache
     * @param type $toArray
     * @return type
     */
    public function findPoll( $limit ) {                
        $query = $this->getEntityManager()->createQuery( 
            'SELECT p FROM AppBundle:Poll p order by p.id DESC' 
        )
        ->setMaxResults( $limit );
        
        $query->setCacheable( SECOND_LEVEL_CACHE_ENABLED );
        $query->setCacheRegion( 'my_poll_region_query' );
                
        if( FIRST_LEVEL_CACHE_ENABLED && ( !SECOND_LEVEL_CACHE_ENABLED || !$query->isCacheable() ) ) {
            
            $query->useQueryCache( FIRST_LEVEL_CACHE_ENABLED );
            $query->useResultCache(FIRST_LEVEL_CACHE_ENABLED, BANNER_REGION_TTL, 'poll_findAllPolls_CacheORM');    
        }
        
        if ( $limit != 1 )
            $result = $query->getResult();
        else
            $result = $query->getSingleResult();
        
        if( SECOND_LEVEL_CACHE_ENABLED ||  SECOND_LEVEL_CACHE_SET_EXPIRE_ENABLED  )
            $this->secondLevelCacheUtility->setExpire( 'poll', POLL_REGION_TTL );
        
        return $result;
    }
    
    /**
     * Crea la query con la cache
     * @param type $toArray
     * @return type
     */
    public function getAllPollsAndPagination( $limit ) {
        
        $limit = explode(',', $limit);
        $firstResult = count($limit) == 1 ? 0 : $limit[0];
        $lastResult = count($limit) == 1 ? $limit[0] : $limit[1];
        
        $sql = ('SELECT p FROM AppBundle:Poll p order by p.id desc');
        $query = $this->getEntityManager()
                ->createQuery( $sql )
                ->setFirstResult($firstResult)
                ->setMaxResults($lastResult);
        
        $query->setCacheable( SECOND_LEVEL_CACHE_ENABLED );
        $query->setCacheRegion( 'my_poll_region_query' );
                
        if( FIRST_LEVEL_CACHE_ENABLED && ( !SECOND_LEVEL_CACHE_ENABLED || !$query->isCacheable() ) ) {
            $query->useQueryCache( FIRST_LEVEL_CACHE_ENABLED );
            $query->useResultCache(FIRST_LEVEL_CACHE_ENABLED, BANNER_REGION_TTL, 'poll_findAllPolls_CacheORM');    
        }        
        $result = $query->getResult();     
        if( SECOND_LEVEL_CACHE_ENABLED ||  SECOND_LEVEL_CACHE_SET_EXPIRE_ENABLED  )
            $this->secondLevelCacheUtility->setExpire( 'poll', POLL_REGION_TTL );
        
        return $result;
    }

}
