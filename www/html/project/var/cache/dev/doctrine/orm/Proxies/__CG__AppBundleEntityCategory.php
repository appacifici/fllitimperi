<?php

namespace Proxies\__CG__\AppBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Category extends \AppBundle\Entity\Category implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'AppBundle\\Entity\\Category' . "\0" . 'id', '' . "\0" . 'AppBundle\\Entity\\Category' . "\0" . 'lastDbId', '' . "\0" . 'AppBundle\\Entity\\Category' . "\0" . 'lastTermId', '' . "\0" . 'AppBundle\\Entity\\Category' . "\0" . 'name', '' . "\0" . 'AppBundle\\Entity\\Category' . "\0" . 'nameUrl', '' . "\0" . 'AppBundle\\Entity\\Category' . "\0" . 'anchorMenu', '' . "\0" . 'AppBundle\\Entity\\Category' . "\0" . 'img', '' . "\0" . 'AppBundle\\Entity\\Category' . "\0" . 'metaTitle', '' . "\0" . 'AppBundle\\Entity\\Category' . "\0" . 'metaKeyword', '' . "\0" . 'AppBundle\\Entity\\Category' . "\0" . 'metaDescription', '' . "\0" . 'AppBundle\\Entity\\Category' . "\0" . 'description', '' . "\0" . 'AppBundle\\Entity\\Category' . "\0" . 'body', '' . "\0" . 'AppBundle\\Entity\\Category' . "\0" . 'color', '' . "\0" . 'AppBundle\\Entity\\Category' . "\0" . 'bgColor', 'dataArticle', '' . "\0" . 'AppBundle\\Entity\\Category' . "\0" . 'isactive', 'subcategories', 'typology', '' . "\0" . 'AppBundle\\Entity\\Category' . "\0" . 'isReserved', '' . "\0" . 'AppBundle\\Entity\\Category' . "\0" . 'isTopUserReserved', 'product', 'model', 'searchTerm', '' . "\0" . 'AppBundle\\Entity\\Category' . "\0" . 'hasModels', '' . "\0" . 'AppBundle\\Entity\\Category' . "\0" . 'hasProducts', '' . "\0" . 'AppBundle\\Entity\\Category' . "\0" . 'isTop', '' . "\0" . 'AppBundle\\Entity\\Category' . "\0" . 'order'];
        }

        return ['__isInitialized__', '' . "\0" . 'AppBundle\\Entity\\Category' . "\0" . 'id', '' . "\0" . 'AppBundle\\Entity\\Category' . "\0" . 'lastDbId', '' . "\0" . 'AppBundle\\Entity\\Category' . "\0" . 'lastTermId', '' . "\0" . 'AppBundle\\Entity\\Category' . "\0" . 'name', '' . "\0" . 'AppBundle\\Entity\\Category' . "\0" . 'nameUrl', '' . "\0" . 'AppBundle\\Entity\\Category' . "\0" . 'anchorMenu', '' . "\0" . 'AppBundle\\Entity\\Category' . "\0" . 'img', '' . "\0" . 'AppBundle\\Entity\\Category' . "\0" . 'metaTitle', '' . "\0" . 'AppBundle\\Entity\\Category' . "\0" . 'metaKeyword', '' . "\0" . 'AppBundle\\Entity\\Category' . "\0" . 'metaDescription', '' . "\0" . 'AppBundle\\Entity\\Category' . "\0" . 'description', '' . "\0" . 'AppBundle\\Entity\\Category' . "\0" . 'body', '' . "\0" . 'AppBundle\\Entity\\Category' . "\0" . 'color', '' . "\0" . 'AppBundle\\Entity\\Category' . "\0" . 'bgColor', 'dataArticle', '' . "\0" . 'AppBundle\\Entity\\Category' . "\0" . 'isactive', 'subcategories', 'typology', '' . "\0" . 'AppBundle\\Entity\\Category' . "\0" . 'isReserved', '' . "\0" . 'AppBundle\\Entity\\Category' . "\0" . 'isTopUserReserved', 'product', 'model', 'searchTerm', '' . "\0" . 'AppBundle\\Entity\\Category' . "\0" . 'hasModels', '' . "\0" . 'AppBundle\\Entity\\Category' . "\0" . 'hasProducts', '' . "\0" . 'AppBundle\\Entity\\Category' . "\0" . 'isTop', '' . "\0" . 'AppBundle\\Entity\\Category' . "\0" . 'order'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Category $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setLastDbId($lastDbId)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLastDbId', [$lastDbId]);

        return parent::setLastDbId($lastDbId);
    }

    /**
     * {@inheritDoc}
     */
    public function getLastDbId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLastDbId', []);

        return parent::getLastDbId();
    }

    /**
     * {@inheritDoc}
     */
    public function setLastTermId($lastTermId)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLastTermId', [$lastTermId]);

        return parent::setLastTermId($lastTermId);
    }

    /**
     * {@inheritDoc}
     */
    public function getLastTermId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLastTermId', []);

        return parent::getLastTermId();
    }

    /**
     * {@inheritDoc}
     */
    public function setName($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setName', [$name]);

        return parent::setName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', []);

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function setNameUrl($nameUrl)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNameUrl', [$nameUrl]);

        return parent::setNameUrl($nameUrl);
    }

    /**
     * {@inheritDoc}
     */
    public function getNameUrl()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNameUrl', []);

        return parent::getNameUrl();
    }

    /**
     * {@inheritDoc}
     */
    public function setImg($img)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setImg', [$img]);

        return parent::setImg($img);
    }

    /**
     * {@inheritDoc}
     */
    public function getImg()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getImg', []);

        return parent::getImg();
    }

    /**
     * {@inheritDoc}
     */
    public function setMetaTitle($metaTitle)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMetaTitle', [$metaTitle]);

        return parent::setMetaTitle($metaTitle);
    }

    /**
     * {@inheritDoc}
     */
    public function getMetaTitle()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMetaTitle', []);

        return parent::getMetaTitle();
    }

    /**
     * {@inheritDoc}
     */
    public function setMetaKeyword($metaKeyword)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMetaKeyword', [$metaKeyword]);

        return parent::setMetaKeyword($metaKeyword);
    }

    /**
     * {@inheritDoc}
     */
    public function getMetaKeyword()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMetaKeyword', []);

        return parent::getMetaKeyword();
    }

    /**
     * {@inheritDoc}
     */
    public function setMetaDescription($metaDescription)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMetaDescription', [$metaDescription]);

        return parent::setMetaDescription($metaDescription);
    }

    /**
     * {@inheritDoc}
     */
    public function getMetaDescription()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMetaDescription', []);

        return parent::getMetaDescription();
    }

    /**
     * {@inheritDoc}
     */
    public function setDescription($description)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDescription', [$description]);

        return parent::setDescription($description);
    }

    /**
     * {@inheritDoc}
     */
    public function getDescription()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDescription', []);

        return parent::getDescription();
    }

    /**
     * {@inheritDoc}
     */
    public function setColor($color)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setColor', [$color]);

        return parent::setColor($color);
    }

    /**
     * {@inheritDoc}
     */
    public function getColor()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getColor', []);

        return parent::getColor();
    }

    /**
     * {@inheritDoc}
     */
    public function setBgColor($bgColor)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setBgColor', [$bgColor]);

        return parent::setBgColor($bgColor);
    }

    /**
     * {@inheritDoc}
     */
    public function getBgColor()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getBgColor', []);

        return parent::getBgColor();
    }

    /**
     * {@inheritDoc}
     */
    public function setIsactive($isactive)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIsactive', [$isactive]);

        return parent::setIsactive($isactive);
    }

    /**
     * {@inheritDoc}
     */
    public function getIsactive()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIsactive', []);

        return parent::getIsactive();
    }

    /**
     * {@inheritDoc}
     */
    public function setIsReserved($isReserved)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIsReserved', [$isReserved]);

        return parent::setIsReserved($isReserved);
    }

    /**
     * {@inheritDoc}
     */
    public function getIsReserved()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIsReserved', []);

        return parent::getIsReserved();
    }

    /**
     * {@inheritDoc}
     */
    public function setIsTopUserReserved($isTopUserReserved)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIsTopUserReserved', [$isTopUserReserved]);

        return parent::setIsTopUserReserved($isTopUserReserved);
    }

    /**
     * {@inheritDoc}
     */
    public function getIsTopUserReserved()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIsTopUserReserved', []);

        return parent::getIsTopUserReserved();
    }

    /**
     * {@inheritDoc}
     */
    public function setHasProducts($hasProducts)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setHasProducts', [$hasProducts]);

        return parent::setHasProducts($hasProducts);
    }

    /**
     * {@inheritDoc}
     */
    public function getHasProducts()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getHasProducts', []);

        return parent::getHasProducts();
    }

    /**
     * {@inheritDoc}
     */
    public function setHasModels($hasModels)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setHasModels', [$hasModels]);

        return parent::setHasModels($hasModels);
    }

    /**
     * {@inheritDoc}
     */
    public function getHasModels()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getHasModels', []);

        return parent::getHasModels();
    }

    /**
     * {@inheritDoc}
     */
    public function addDataArticle(\AppBundle\Entity\DataArticle $dataArticle)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addDataArticle', [$dataArticle]);

        return parent::addDataArticle($dataArticle);
    }

    /**
     * {@inheritDoc}
     */
    public function removeDataArticle(\AppBundle\Entity\DataArticle $dataArticle)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeDataArticle', [$dataArticle]);

        return parent::removeDataArticle($dataArticle);
    }

    /**
     * {@inheritDoc}
     */
    public function getDataArticle()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDataArticle', []);

        return parent::getDataArticle();
    }

    /**
     * {@inheritDoc}
     */
    public function addSubcategory(\AppBundle\Entity\Subcategory $subcategory)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addSubcategory', [$subcategory]);

        return parent::addSubcategory($subcategory);
    }

    /**
     * {@inheritDoc}
     */
    public function removeSubcategory(\AppBundle\Entity\Subcategory $subcategory)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeSubcategory', [$subcategory]);

        return parent::removeSubcategory($subcategory);
    }

    /**
     * {@inheritDoc}
     */
    public function getSubcategories()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSubcategories', []);

        return parent::getSubcategories();
    }

    /**
     * {@inheritDoc}
     */
    public function addSearchTerm(\AppBundle\Entity\SearchTerm $searchTerm)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addSearchTerm', [$searchTerm]);

        return parent::addSearchTerm($searchTerm);
    }

    /**
     * {@inheritDoc}
     */
    public function removeSearchTerm(\AppBundle\Entity\SearchTerm $searchTerm)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeSearchTerm', [$searchTerm]);

        return parent::removeSearchTerm($searchTerm);
    }

    /**
     * {@inheritDoc}
     */
    public function getSearchTerm()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSearchTerm', []);

        return parent::getSearchTerm();
    }

    /**
     * {@inheritDoc}
     */
    public function addProduct(\AppBundle\Entity\Product $product)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addProduct', [$product]);

        return parent::addProduct($product);
    }

    /**
     * {@inheritDoc}
     */
    public function removeProduct(\AppBundle\Entity\Product $product)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeProduct', [$product]);

        return parent::removeProduct($product);
    }

    /**
     * {@inheritDoc}
     */
    public function getProduct()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getProduct', []);

        return parent::getProduct();
    }

    /**
     * {@inheritDoc}
     */
    public function removeModel(\AppBundle\Entity\Model $model)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeModel', [$model]);

        return parent::removeModel($model);
    }

    /**
     * {@inheritDoc}
     */
    public function getModel()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getModel', []);

        return parent::getModel();
    }

    /**
     * {@inheritDoc}
     */
    public function setIsTop($isTop)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIsTop', [$isTop]);

        return parent::setIsTop($isTop);
    }

    /**
     * {@inheritDoc}
     */
    public function getIsTop()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIsTop', []);

        return parent::getIsTop();
    }

    /**
     * {@inheritDoc}
     */
    public function setOrder($order)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setOrder', [$order]);

        return parent::setOrder($order);
    }

    /**
     * {@inheritDoc}
     */
    public function getOrder()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getOrder', []);

        return parent::getOrder();
    }

    /**
     * {@inheritDoc}
     */
    public function setBody($body)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setBody', [$body]);

        return parent::setBody($body);
    }

    /**
     * {@inheritDoc}
     */
    public function getBody()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getBody', []);

        return parent::getBody();
    }

    /**
     * {@inheritDoc}
     */
    public function setAnchorMenu($anchorMenu)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAnchorMenu', [$anchorMenu]);

        return parent::setAnchorMenu($anchorMenu);
    }

    /**
     * {@inheritDoc}
     */
    public function getAnchorMenu()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAnchorMenu', []);

        return parent::getAnchorMenu();
    }

}
